###
### Settings you may want to change
### @configure_input@
###

# The number of jobs using by make
JOBS = -j1

###
### Settings by Autoconf
###

WT_VERSION = @wt_version@
BOOST_VERSION = @boost_version@
PKG_CONFIG = @pkg_config@
PREFIX = @prefix@
BOOST_PREFIX=@BOOST_PREFIX@
SYSTEM_LIBPNG = @system_libpng@
SYSTEM_LIBPNG_CFLAGS = @system_libpng_cflags@
SYSTEM_LIBPNG_LDFLAGS = @system_libpng_ldflags@
SYSTEM_LIBFREETYPE = @system_libfreetype@
WGET = @wget@
GIT = @git@
WT_CPP_11_MODE=@WT_CPP_11_MODE@

###
### Main makefile logic
###

ifeq ($(WGET),no-wget)
wget = echo Please download \\n\\t$(1)\\n\\tto $(2) \\nOr install wget and re-run configure to automatically download the files
else
wget = $(WGET) --output-document=$(2) $(1)
endif

ifeq ($(strip $(BOOST_PREFIX)),)
BOOST_PREFIX=$(PREFIX)
endif
## this hack is required to get fcgi examples to link
LD_LIBRARY_PATH=$(PREFIX)/lib
export LD_LIBRARY_PATH

PWD=$(shell pwd)

FCGI_VERSION = 2.4.0
HARU_VERSION = kdeforche-git
GM_VERSION = 1.3.21
PNG_VERSION = 1.5.0
FREETYPE_VERSION = 2.4.8

BOOST_DOT_VERSION = $(subst _,.,$(BOOST_VERSION))

BOOST_DIR = boost_$(BOOST_VERSION)
BOOST_PACKAGE = $(BOOST_DIR).tar.bz2
BOOST_DOWNLOAD_URL = http://downloads.sourceforge.net/project/boost/boost/$(BOOST_DOT_VERSION)/$(BOOST_PACKAGE)

FCGI_DIR = fcgi-$(FCGI_VERSION)
FCGI_PACKAGE = $(FCGI_DIR).tar.gz
FCGI_DOWNLOAD_URL = http://www.fastcgi.com/dist/$(FCGI_PACKAGE)

HARU_DIR = libharu-$(HARU_VERSION)

PNG_DIR = libpng-$(PNG_VERSION)
PNG_PACKAGE = $(PNG_DIR).tar.bz2
PNG_DOWNLOAD_URL = http://downloads.sourceforge.net/project/libpng/libpng15/$(PNG_VERSION)/$(PNG_PACKAGE)

FREETYPE_DIR = freetype-$(FREETYPE_VERSION)
FREETYPE_PACKAGE = $(FREETYPE_DIR).tar.bz2
FREETYPE_DOWNLOAD_URL = http://sourceforge.net/projects/freetype/files/freetype2/$(FREETYPE_VERSION)/$(FREETYPE_PACKAGE)

GM_DIR = GraphicsMagick-$(GM_VERSION)
GM_PACKAGE = $(GM_DIR).tar.bz2
GM_DOWNLOAD_URL = http://downloads.sourceforge.net/project/graphicsmagick/graphicsmagick/$(GM_VERSION)/$(GM_PACKAGE)

STAGING = $(PWD)/staging

ifeq ($(SYSTEM_LIBPNG),no)
GM_DEPS := png
PNG_CFLAGS := -I$(STAGING)/include
PNG_LDFLAGS := -L$(STAGING)/lib
PNG_PREFIX := $(STAGING)
PNG_INSTALL_PREFIX := $(PREFIX)
HARU_DEPS := png
else
PNG_CFLAGS := $(SYSTEM_LIBPNG_CFLAGS)
PNG_LDFLAGS := $(SYSTEM_LIBPNG_LDFLAGS)
PNG_PREFIX := $(shell $(PKG_CONFIG) --variable=prefix libpng)
PNG_INSTALL_PREFIX := $(PNG_PREFIX)
endif

ifeq ($(SYSTEM_LIBFREETYPE),no)
GM_DEPS := $(GM_DEPS) freetype
FT_CFLAGS := $(GM_CFLAGS) -I$(STAGING)/include
FT_LDFLAGS := $(GM_LDFLAGS) -L$(STAGING)/lib
else
endif

GM_CFLAGS = $(PNG_CFLAGS) $(FT_CFLAGS)
GM_LDFLAGS = $(PNG_LDFLAGS) $(FT_LDFLAGS)
GM_INSTALL_LDFLAGS = $(SYSTEM_LIBPNG_LDFLAGS) -L$(PREFIX)/lib

WT_DIR = wt-$(WT_VERSION)
WT_PACKAGE = $(WT_DIR).tar.gz
WT_DOWNLOAD_URL = http://prdownloads.sourceforge.net/witty/$(WT_PACKAGE)?download

BOOST_BOOTSTRAP_ARGS = --prefix=$(BOOST_PREFIX) --with-libraries=filesystem,date_time,regex,program_options,signals,system,thread,random
ifeq ($(strip $(WT_CPP_11_MODE)),)
BOOST_BJAM_ARGS = $(JOBS)
else
BOOST_BJAM_ARGS = $(JOBS) cxxflags=$(WT_CPP_11_MODE)
endif

CLEAN_FILES = config.status config.log config.cache autom4te.cache $(STAGING)
DIST_CLEAN_FILES = $(CLEAN_FILES) Makefile

default:
	@echo "Usage:"
	@echo "  $(MAKE) all          : Builds and installs Wt and its dependencies"
	@echo 
	@echo "  $(MAKE) fetch        : Downloads packages"
	@echo
	@echo "  $(MAKE) deps         : Builds dependencies"
	@echo "  $(MAKE) deps-install : Installs dependencies"
	@echo "                        (needs permissions to ${PREFIX})"
	@echo "  $(MAKE) wt           : Builds wt"
	@echo "  $(MAKE) wt-install   : Installs wt"
	@echo "                        (needs permissions to ${PREFIX})"
	@echo " "
	@echo "  $(MAKE) clean        : cleans deps and wt "
	@echo "  $(MAKE) distclean    : remove deps and wt "

all:	deps deps-install wt wt-install

clean: \
	boost-clean \
	haru-clean \
	fcgi-clean \
	gm-clean \
	wt-clean \
	$(addsuffix -clean,$(GM_DEPS))
	-rm -rf $(CLEAN_FILES)

distclean: \
	boost-distclean \
	haru-distclean \
	fcgi-distclean \
	gm-distclean \
	wt-distclean \
	$(addsuffix -distclean,$(GM_DEPS))
	-rm -rf $(DIST_CLEAN_FILES) 

fetch: \
	boost-fetch \
	haru-fetch \
	fcgi-fetch \
	gm-fetch \
	$(addsuffix -fetch,$(GM_DEPS)) \
	wt-fetch

deps: \
	boost \
	gm \
	haru \
	fcgi

deps-install: \
	boost-install \
	$(addsuffix -install,$(GM_DEPS)) \
	gm-install \
	haru-install \
	fcgi-install

boost: deps/$(BOOST_DIR)
	cd deps/$(BOOST_DIR); \
	./bootstrap.sh $(BOOST_BOOTSTRAP_ARGS); \
	./bjam $(BOOST_BJAM_ARGS);

boost-install:
	cd deps/$(BOOST_DIR); \
	./bjam install;

boost-clean:
	-rm -rf deps/$(BOOST_DIR)/stage deps/$(BOOST_DIR)/bin.v2

boost-distclean:
	-rm -rf deps/$(BOOST_DIR)

haru: deps/$(HARU_DIR) $(HARU_DEPS)
	cd deps/$(HARU_DIR) && \
		./configure --prefix=$(PREFIX) --with-png=$(PNG_PREFIX) && \
		$(MAKE) $(JOBS)

haru-install:
	cd deps/$(HARU_DIR) && \
		./configure --prefix=$(PREFIX) --with-png=$(PNG_INSTALL_PREFIX) && \
		$(MAKE) install

haru-clean:
	-cd deps/$(HARU_DIR) && $(MAKE) distclean

haru-distclean:
	-rm -rf deps/$(HARU_DIR)

fcgi: deps/$(FCGI_DIR)
	cd deps/$(FCGI_DIR) && ./configure --prefix=$(PREFIX) && $(MAKE) $(JOBS)

fcgi-install:
	cd deps/$(FCGI_DIR) && $(MAKE) install

fcgi-clean:
	-cd deps/$(FCGI_DIR) && $(MAKE) distclean

fcgi-distclean:
	-rm -rf deps/$(FCGI_DIR)

gm: deps/$(GM_DIR) $(GM_DEPS)
	cd deps/$(GM_DIR); \
		CFLAGS="$(GM_CFLAGS)" LDFLAGS="$(GM_LDFLAGS)" \
		./configure --prefix=$(PREFIX) \
			    --disable-openmp \
			    --enable-shared=yes \
			    --enable-static=no \
			    --without-magick-plus-plus --without-perl; \
		$(MAKE) $(JOBS)

gm-install: $(addsuffix -install,$(GM_DEPS))
	cd deps/$(GM_DIR) && \
		rm libtool config.status; \
		CFLAGS="$(GM_CFLAGS)" \
		LDFLAGS="$(GM_INSTALL_LDFLAGS)" \
		./configure --prefix=$(PREFIX) \
			    --disable-openmp \
			    --enable-shared=yes \
			    --enable-static=no \
			    --without-magick-plus-plus --without-perl \
			&& $(MAKE) install

gm-clean: $(addsuffix -clean,$(GM_DEPS)) 
	-cd deps/$(GM_DIR) && $(MAKE) distclean

gm-distclean: $(addsuffix -distclean,$(GM_DEPS))
	-rm -rf deps/$(GM_DIR)

png: deps/$(PNG_DIR)
	cd deps/$(PNG_DIR) && \
		./configure --prefix=$(STAGING) && \
		$(MAKE) $(JOBS) && $(MAKE) install

png-install:
	cd deps/$(PNG_DIR) && ./configure --prefix=$(PREFIX) && $(MAKE) install

png-clean:
	-cd deps/$(PNG_DIR) && $(MAKE) distclean

png-distclean:
	-rm -rf deps/$(PNG_DIR)

freetype: deps/$(FREETYPE_DIR)
	cd deps/$(FREETYPE_DIR) && \
		GNUMAKE=$(MAKE) ./configure --prefix=$(STAGING) && \
		$(MAKE) $(JOBS) && $(MAKE) install

freetype-install:
	cd deps/$(FREETYPE_DIR) && GNUMAKE=$(MAKE) ./configure --prefix=$(PREFIX) && $(MAKE) install

freetype-clean:
	-cd deps/$(FREETYPE_DIR) && $(MAKE) distclean

freetype-distclean:
	-rm -rf deps/$(FREETYPE_DIR)

wt: $(WT_DIR)
ifeq ($(WT_VERSION),git)
	-cd $(WT_DIR); $(GIT) pull;
endif
	-mkdir wt-build;
	cd wt-build && cmake ../$(WT_DIR) -DCMAKE_INSTALL_PREFIX=$(PREFIX) -DBOOST_ROOT=$(BOOST_PREFIX) \
	  -DUSERLIB_PREFIX=$(PREFIX) -DBOOST_PREFIX=$(BOOST_PREFIX) -DWT_CPP_11_MODE=$(WT_CPP_11_MODE);
	cd wt-build && $(MAKE) $(JOBS);
	cd wt-build/examples && $(MAKE) $(JOBS);

wt-install:
	cd wt-build && $(MAKE) install;

wt-clean:
	rm -rf wt-build

wt-distclean: wt-clean
	-rm -rf $(WT_DIR)

deps/$(BOOST_DIR): deps/$(BOOST_PACKAGE)
	cd deps; tar -xjvf $(BOOST_PACKAGE)

deps/$(BOOST_PACKAGE):
	@$(call wget,$(BOOST_DOWNLOAD_URL),$@)

boost-fetch: deps/$(BOOST_PACKAGE)

deps/$(HARU_DIR):
	$(GIT) clone git://github.com/kdeforche/libharu.git deps/$(HARU_DIR) && \
		(cd deps/$(HARU_DIR); ./buildconf.sh --force;)

haru-fetch:

deps/$(FCGI_DIR): deps/$(FCGI_PACKAGE)
	cd deps; tar -xzvf $(FCGI_PACKAGE);
	cd deps/$(FCGI_DIR); patch -p1 < ../fcgi-2.4.0-stdio.patch

deps/$(FCGI_PACKAGE):
	@$(call wget,$(FCGI_DOWNLOAD_URL),$@)

fcgi-fetch: deps/$(FCGI_PACKAGE)

deps/$(GM_DIR): deps/$(GM_PACKAGE)
	cd deps; tar -xjvf $(GM_PACKAGE)

deps/$(GM_PACKAGE):
	@$(call wget,$(GM_DOWNLOAD_URL),$@)

gm-fetch: deps/$(GM_PACKAGE)

deps/$(PNG_DIR): deps/$(PNG_PACKAGE)
	cd deps; tar -xjvf $(PNG_PACKAGE)

deps/$(PNG_PACKAGE):
	@$(call wget,$(PNG_DOWNLOAD_URL),$@)

png-fetch: deps/$(PNG_PACKAGE)

deps/$(FREETYPE_DIR): deps/$(FREETYPE_PACKAGE)
	cd deps; tar -xjvf $(FREETYPE_PACKAGE)

deps/$(FREETYPE_PACKAGE):
	@$(call wget,$(FREETYPE_DOWNLOAD_URL),$@)

freetype-fetch: deps/$(FREETYPE_PACKAGE)

ifeq ($(WT_VERSION),git)
wt-fetch:

$(WT_DIR):
	$(GIT) clone git://github.com/kdeforche/wt.git $(WT_DIR);
else
wt-fetch: $(WT_PACKAGE)

$(WT_DIR): $(WT_PACKAGE)
	tar -xzvf $(WT_PACKAGE)
endif

$(WT_PACKAGE):
	@$(call wget,$(WT_DOWNLOAD_URL),$@)
